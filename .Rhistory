table(data$age)
cat("\nGender\n")
table(data$gender)
cat("\nEthnicity\n")
table(data$ethnicity)
cat("\nJundice\n")
table(data$jundice)
cat("\nRelation\n")
table(data$relation)
cat("\nCountry of Residency\n")
table(data$contry_of_res)
cat("\nPrevious Screening\n")
table(data$used_app_before)
data <- data %>%
select(-age_desc)
data$Outcome <- data$`Class/ASD`
data <- data %>%
select(-`Class/ASD`)
# Age Buckets
data$age <- cut(data$age,
breaks = c(17, 24, 34, 44, Inf),
labels = c("17-24", "25-34", "35-44", "45+"),
right = TRUE,
include.lowest = TRUE)
table(data$age)
# Rare Categories
t <- c("others", "Others","Latino", "Hispanic", "Pasifika", "Turkish")
# Prep
data$ethnicity <- as.character(data$ethnicity)
# Convert Rare Categories to Others
data$ethnicity <- ifelse(data$ethnicity %in% t, "Others", data$ethnicity)
# Re-Factor
data$ethnicity <- factor(data$ethnicity)
# Confirmation
table(data$ethnicity)
# Combination Categories
t.family <- c("Parent", "Relative")
t.other <- c("Health care professional", "Others")
# Prep
data$relation <- as.character(data$relation)
# Update
data$relation[data$relation %in% t.family] <- "Family"
data$relation[data$relation %in% t.other]  <- "Other"
data$relation[data$relation == "Self"]     <- "Self"
# To Factor
data$relation <- factor(data$relation)
# Confirmation
table(data$relation)
# Non-Rare Countries
t <- c("United States", "United Arab Emirates", "New Zealand",
"India", "United Kingdom", "Jordan", "Australia")
# Prep
data$contry_of_res <- as.character(data$contry_of_res)
# Convert Rare to Other
data$contry_of_res <- ifelse(data$contry_of_res %in% t,
data$contry_of_res,
"Other")
# Re-Factor
data$contry_of_res <- factor(data$contry_of_res)
# Confirmation
table(data$contry_of_res)
#NOTE: All helper functions were previously used in assignment 3
f.examine.numeric <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
# Plot
boxplot(independent ~ dependent, main = t.name)
# Split groups
f <- independent[dependent == "false"]
t <- independent[dependent == "true"]
# Shapiro Length Requirements
t.f <- if (length(f) >= 3 && length(f) <= 5000) shapiro.test(f)$p.value >= 0.05 else TRUE
t.t <- if (length(t) >= 3 && length(t) <= 5000) shapiro.test(t)$p.value >= 0.05 else TRUE
# Parametric Check
if (t.f && t.t) {
k <- t.test(independent ~ dependent)
} else {
k <- kruskal.test(independent ~ dependent)
}
association <- k$p.value < 0.01
return(association)
}
f.examine.categorical <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
t.table <- table(independent, dependent)
mosaicplot(t.table, main=t.name, shade=TRUE)
k <- chisq.test(t.table)
association <- k$p.value < 0.01
return(association)
}
f.examine.ordinal <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
boxplot(independent~dependent, main = t.name, col = "red")
k <- kruskal.test(independent~dependent)
association <- k$p.value < 0.01
return(association)
}
# Outcome Dataframe
t <- data.frame(independent = character(),
association = logical(),
stringsAsFactors = FALSE)
# Dependent Variable
dependent <- data$`Outcome`
y <- "Outcome"
# Loop to Find Association(s)
for (x in names(data)[!names(data) %in% "Outcome"]) {
independent <- data[[x]]
if (is.numeric(independent)) {
outcome <- f.examine.numeric(dependent, independent, x, y)
} else {
if (is.ordered(independent)) {
outcome <- f.examine.ordinal(dependent, independent, x, y)
} else {
outcome <- f.examine.categorical(dependent, independent, x, y)
}
}
t <- rbind(t, data.frame(independent = x, association = outcome))
}
# Filter No Association
t %>% filter(!association)
# Set Seed
set.seed(1)
# Test Split
train.sample <- createDataPartition(data$`Outcome`, p=0.9, list=FALSE)
train.data <- data[train.sample, ]
test.data <- data[-train.sample, ]
# Labels
test.data.labels <- test.data$'Outcome'
set.seed(1)
# Validation Split (CNN)
cnn.sample <- createDataPartition(train.data$`Outcome`, p=0.9, list=FALSE)
cnn.train <- train.data[cnn.sample, ]
cnn.validation <- train.data[-cnn.sample, ]
cnn.test <- test.data
cnn.test.labels <- test.data.labels
# Mode Helper - from past assignments
f.mode <- function(x) {
t <- table(x)
mode_values <- names(t)[t == max(t)]
return(mode_values[1])
}
# Impute Age
data$age[is.na(data$age)] <- f.mode(cnn.train$age)
# Create indicator
data$missing_background <- is.na(data$relation) & is.na(data$ethnicity)
# Store levels
t.ethnicity <- c(levels(data$ethnicity), "Unknown")
t.relation  <- c(levels(data$relation), "Unknown")
# Add Updated Levels
data$ethnicity <- factor(data$ethnicity, levels = t.ethnicity)
data$relation  <- factor(data$relation, levels = t.relation)
# Impute
data$ethnicity[data$missing_background] <- "Unknown"
data$relation[data$missing_background]  <- "Unknown"
data$missing_background <- as.integer(data$missing_background)
colSums(is.na(data))
# Set Seed
set.seed(1)
# Test Split
train.sample <- createDataPartition(data$`Outcome`, p=0.9, list=FALSE)
train.data <- data[train.sample, ]
test.data <- data[-train.sample, ]
# Labels
train.data.labels <- train.data$`Outcome`
test.data.labels <- test.data$`Outcome`
# Prune Outcome Variable
test.data <- test.data %>%
select(-`Outcome`)
## CNN Split
set.seed(1)
# Validation Split (CNN)
cnn.sample <- createDataPartition(train.data$`Outcome`, p=0.9, list=FALSE)
cnn.train <- train.data[cnn.sample, ]
cnn.train.labels <- cnn.train$`Outcome`
cnn.validation <- train.data[-cnn.sample, ]
cnn.validation.labels <- cnn.validation$`Outcome`
cnn.test <- test.data
cnn.test.labels <- test.data.labels
# Prune
cnn.train <- cnn.train %>%
select(-`Outcome`)
cnn.validation <- cnn.validation %>%
select(-`Outcome`)
str(data)
t <- train.data$result
# Assign Risk Level(s)
risk.train.score <- ifelse(t >= 7, "High", "Low")
risk.test.score <- ifelse(t >=7, "High", "Low")
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
mutate(ClassASD = train.data.labels) %>%
filter(result >= 7) %>%
summarise(t.prob = mean(Outcome == "YES"))
model.risk
table(train.data$result >= 7, train.data$Outcome)
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
mutate(ClassASD = train.data.labels) %>%
filter(result >= 7) %>%
summarise(t.prob = mean(Outcome == "YES"))
model.risk
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(Outcome == "YES"))
model.risk
t <- train.data.labels
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(t == "YES"))
model.risk
t <- train.data.labels
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(t == "YES"))
model.risk
library(foreign)
library(dplyr)
library(caret)
library(glmnet)
library(mltools)
library(data.table)
library(keras)
library(tfruns)
library(iml)
library(mlr)
library(fairness)
data <- read.arff("Autism-Adult-Data.arff")
summary(data)
t=colSums(is.na(data))
cat("Columns with Missing Values:\n")
t[t>0]
k <- round((t/nrow(data))*100, 2)
cat("\nPercentage of Missing Values in Identified Columns:\n")
k[k>0]
t=is.na(data$ethnicity)
k=is.na(data$relation)
which(t != k)
summary(data$age)
table(data$age)
cat("\nGender\n")
table(data$gender)
cat("\nEthnicity\n")
table(data$ethnicity)
cat("\nJundice\n")
table(data$jundice)
cat("\nRelation\n")
table(data$relation)
cat("\nCountry of Residency\n")
table(data$contry_of_res)
cat("\nPrevious Screening\n")
table(data$used_app_before)
data <- data %>%
select(-age_desc)
data$Outcome <- data$`Class/ASD`
data <- data %>%
select(-`Class/ASD`)
# Age Buckets
data$age <- cut(data$age,
breaks = c(17, 24, 34, 44, Inf),
labels = c("17-24", "25-34", "35-44", "45+"),
right = TRUE,
include.lowest = TRUE)
table(data$age)
# Rare Categories
t <- c("others", "Others","Latino", "Hispanic", "Pasifika", "Turkish")
# Prep
data$ethnicity <- as.character(data$ethnicity)
# Convert Rare Categories to Others
data$ethnicity <- ifelse(data$ethnicity %in% t, "Others", data$ethnicity)
# Re-Factor
data$ethnicity <- factor(data$ethnicity)
# Confirmation
table(data$ethnicity)
# Combination Categories
t.family <- c("Parent", "Relative")
t.other <- c("Health care professional", "Others")
# Prep
data$relation <- as.character(data$relation)
# Update
data$relation[data$relation %in% t.family] <- "Family"
data$relation[data$relation %in% t.other]  <- "Other"
data$relation[data$relation == "Self"]     <- "Self"
# To Factor
data$relation <- factor(data$relation)
# Confirmation
table(data$relation)
# Non-Rare Countries
t <- c("United States", "United Arab Emirates", "New Zealand",
"India", "United Kingdom", "Jordan", "Australia")
# Prep
data$contry_of_res <- as.character(data$contry_of_res)
# Convert Rare to Other
data$contry_of_res <- ifelse(data$contry_of_res %in% t,
data$contry_of_res,
"Other")
# Re-Factor
data$contry_of_res <- factor(data$contry_of_res)
# Confirmation
table(data$contry_of_res)
#NOTE: All helper functions were previously used in assignment 3
f.examine.numeric <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
# Plot
boxplot(independent ~ dependent, main = t.name)
# Split groups
f <- independent[dependent == "false"]
t <- independent[dependent == "true"]
# Shapiro Length Requirements
t.f <- if (length(f) >= 3 && length(f) <= 5000) shapiro.test(f)$p.value >= 0.05 else TRUE
t.t <- if (length(t) >= 3 && length(t) <= 5000) shapiro.test(t)$p.value >= 0.05 else TRUE
# Parametric Check
if (t.f && t.t) {
k <- t.test(independent ~ dependent)
} else {
k <- kruskal.test(independent ~ dependent)
}
association <- k$p.value < 0.01
return(association)
}
f.examine.categorical <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
t.table <- table(independent, dependent)
mosaicplot(t.table, main=t.name, shade=TRUE)
k <- chisq.test(t.table)
association <- k$p.value < 0.01
return(association)
}
f.examine.ordinal <- function(dependent, independent, x.name, y.name){
# Presentation
t.name <- paste("BoxPlot of", x.name, "vs.", y.name)
boxplot(independent~dependent, main = t.name, col = "red")
k <- kruskal.test(independent~dependent)
association <- k$p.value < 0.01
return(association)
}
# Outcome Dataframe
t <- data.frame(independent = character(),
association = logical(),
stringsAsFactors = FALSE)
# Dependent Variable
dependent <- data$`Outcome`
y <- "Outcome"
# Loop to Find Association(s)
for (x in names(data)[!names(data) %in% "Outcome"]) {
independent <- data[[x]]
if (is.numeric(independent)) {
outcome <- f.examine.numeric(dependent, independent, x, y)
} else {
if (is.ordered(independent)) {
outcome <- f.examine.ordinal(dependent, independent, x, y)
} else {
outcome <- f.examine.categorical(dependent, independent, x, y)
}
}
t <- rbind(t, data.frame(independent = x, association = outcome))
}
# Filter No Association
t %>% filter(!association)
# Set Seed
set.seed(1)
# Test Split
train.sample <- createDataPartition(data$`Outcome`, p=0.9, list=FALSE)
train.data <- data[train.sample, ]
test.data <- data[-train.sample, ]
# Labels
test.data.labels <- test.data$'Outcome'
set.seed(1)
# Validation Split (CNN)
cnn.sample <- createDataPartition(train.data$`Outcome`, p=0.9, list=FALSE)
cnn.train <- train.data[cnn.sample, ]
cnn.validation <- train.data[-cnn.sample, ]
cnn.test <- test.data
cnn.test.labels <- test.data.labels
# Mode Helper - from past assignments
f.mode <- function(x) {
t <- table(x)
mode_values <- names(t)[t == max(t)]
return(mode_values[1])
}
# Impute Age
data$age[is.na(data$age)] <- f.mode(cnn.train$age)
# Create indicator
data$missing_background <- is.na(data$relation) & is.na(data$ethnicity)
# Store levels
t.ethnicity <- c(levels(data$ethnicity), "Unknown")
t.relation  <- c(levels(data$relation), "Unknown")
# Add Updated Levels
data$ethnicity <- factor(data$ethnicity, levels = t.ethnicity)
data$relation  <- factor(data$relation, levels = t.relation)
# Impute
data$ethnicity[data$missing_background] <- "Unknown"
data$relation[data$missing_background]  <- "Unknown"
data$missing_background <- as.integer(data$missing_background)
colSums(is.na(data))
# Set Seed
set.seed(1)
# Test Split
train.sample <- createDataPartition(data$`Outcome`, p=0.9, list=FALSE)
train.data <- data[train.sample, ]
test.data <- data[-train.sample, ]
# Labels
train.data.labels <- train.data$`Outcome`
test.data.labels <- test.data$`Outcome`
# Prune Outcome Variable
test.data <- test.data %>%
select(-`Outcome`)
## CNN Split
set.seed(1)
# Validation Split (CNN)
cnn.sample <- createDataPartition(train.data$`Outcome`, p=0.9, list=FALSE)
cnn.train <- train.data[cnn.sample, ]
cnn.train.labels <- cnn.train$`Outcome`
cnn.validation <- train.data[-cnn.sample, ]
cnn.validation.labels <- cnn.validation$`Outcome`
cnn.test <- test.data
cnn.test.labels <- test.data.labels
# Prune
cnn.train <- cnn.train %>%
select(-`Outcome`)
cnn.validation <- cnn.validation %>%
select(-`Outcome`)
str(data)
t <- train.data$result
# Assign Risk Level(s)
risk.train.score <- ifelse(t >= 7, "High", "Low")
risk.test.score <- ifelse(t >=7, "High", "Low")
t <- train.data.labels
# Get mean ASD rate for high scorers
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(t == "YES"))
model.risk
# Map Probability
p.risk.prediction <- ifelse(risk.test.score == "High", 0.269, 0)
risk.prediction <- ifelse(p.risk.prediction > 0.5, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=train.data.labels)
risk.crosstab
table(risk.prediction)
# Map Probability
p.risk.prediction <- ifelse(risk.test.score == "High", 0.269, 0)
risk.prediction <- ifelse(p.risk.prediction > 0.1, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=train.data.labels)
risk.crosstab
t <- train.data$result
# Assign Risk Level(s)
risk.train.score <- ifelse(t >= 7, "High", "Low")
risk.test.score <- ifelse(test.data$result >=7, "High", "Low")
t <- train.data.labels
# Mean ASD Rate
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(t == "YES"))
model.risk
# Map Probability
p.risk.prediction <- ifelse(risk.test.score == "High", 0.269, 0)
risk.prediction <- ifelse(p.risk.prediction > 0.1, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=train.data.labels)
# Assign High Risks
risk.train.score <- ifelse(train.data$result >= 7, "High", "Low")
risk.test.score  <- ifelse(test.data$result  >= 7, "High", "Low")
t <- train.data.labels
# Mean ASD Rate
model.risk <- train.data %>%
filter(risk.train.score == "High") %>%
summarise(t.prob = mean(t == "YES"))
model.risk
# Map Probability
p.risk.prediction <- ifelse(risk.test.score == "High", 0.269, 0)
risk.prediction <- ifelse(p.risk.prediction > 0.1, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=train.data.labels)
# Map Probability
p.risk.prediction <- ifelse(risk.test.score == "High", 0.269, 0)
risk.prediction <- ifelse(p.risk.prediction > 0.1, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=test.data.labels)
risk.crosstab
# Map Probability
set.seed(1)
p.risk.prediction <-
ifelse(risk.test.score == "High",
rbinom(length(risk.test.score), 1, 0.269),0)
risk.prediction <- ifelse(p.risk.prediction == 1, "YES", "NO")
# Outcomes
risk.crosstab <- table(Predicted=risk.prediction,Actual=test.data.labels)
risk.crosstab
# Counts
risk.TP <- 3
risk.FP <- 0
risk.FN <- 15
risk.TN <- 51
# Performance
risk.recall <- risk.TP / (risk.TP + risk.FN)
risk.precision <- risk.TP / (risk.TP + risk.FP)
risk.f1 <- 2 * ((risk.precision * risk.recall) / (risk.precision + risk.recall))
risk.accuracy <- (risk.TP + risk.TN) / (risk.TP + risk.FP + risk.FN + risk.TN)
# Output
cat("\nHeuristic Benchmark Performance\n")
cat("Precision:", round(risk.precision, 4), "\n")
cat("Recall:", round(risk.recall, 4), "\n")
cat("F1 Score:", round(risk.f1, 4), "\n")
cat("Accuracy:", round(risk.accuracy, 4), "\n")
